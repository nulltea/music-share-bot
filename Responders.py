import json;
import random;
import time;
import uuid;
from functools import *;
from collections import Iterable as iter;

import mongoengine as mdb
import telebot

from data_storage import ChatsInfo, MusicTrack

GREETING_KEYWORDS = ["hello", "hi", "greetings", "sup", "whats up", "hey"]
GREETING_RESPONSES = ["Hi there", "Greetings", "Salute", "Hello" "Loading...Here I am!"]


class Responder:
	action_dictionary = {};
	insert_reply = "Add music track";
	view_reply = "View music collection";

	def __init__(self, bot):
		self.bot = bot

	def respond(self, message):
		if any(word in message.text.lower() for word in ["init", "ready"]):
			self.bot.send_message(message.chat.id, "Greetings Master. I am ready to serve you!", reply_markup=self.get_creator_menu());
		if message.text == self.insert_reply:
			self.bot.send_message(message.chat.id, "Send me a link to the track, if you please");
			self.bot.register_next_step_handler(message, self.insert_callback);
		elif message.text == self.view_reply:
			self.view_music_collection(message);

	def subscribe_actions(self, call):
		self.action_dictionary[call.data](call=call);

	def command_handler(self, command, message):
		if command == "start":
			self.bot.send_message(message.chat.id, "Greetings my friend! I'm here to help you share music with your friends. Let's begin then, shall we?");

	def view_music_collection(self, message):
		for music_track in MusicTrack.objects(is_used=False):
			self.bot.send_photo(message.chat.id, music_track.cover_image, music_track.generate_message(), reply_markup=self.get_track_menu(music_track), parse_mode='Markdown');

	def insert_callback(self, message):
		music_track = MusicTrack();
		music_track.add_link(message.text);
		try:
			music_track.save();
		except mdb.errors.NotUniqueError as e:
			music_track = MusicTrack.objects(track_id=music_track.track_id).get();
			self.bot.send_message(message.chat.id, "Track was already added. Here it is:");
		self.bot.send_photo(message.chat.id, music_track.cover_image, music_track.generate_message(), reply_markup=self.get_track_menu(music_track), parse_mode='Markdown');

	def edit_callback(self, message, track_property, track):
		attr = getattr(track, track_property)
		if callable(attr):
			attr(message.text)
		elif isinstance(attr, iter):
			attr.append(message.text);
		else:
			setattr(track, track_property, message.text);
		track.save();
		self.bot.send_message(message.chat.id, random.choice(["Saved", "Done", "Yep", "Nice", "Greate"]));

	def get_creator_menu(self):
		menu = telebot.types.ReplyKeyboardMarkup();
		menu.row(self.insert_reply);
		menu.row(self.view_reply);
		return menu;

	def edit_action(self, call, hint, property, track):
		self.bot.send_message(call.message.chat.id, hint);
		self.bot.register_next_step_handler(call.message, self.edit_callback, property, track);

	def del_action(self, call, track, parent_menu):
		def func(call, track):
			track.delete();
			self.bot.delete_message(call.message.chat.id, call.message.message_id);
		menu = telebot.types.InlineKeyboardMarkup();

		act_uuid = uuid.uuid4().hex;
		menu.add(telebot.types.InlineKeyboardButton(text="Yes, do it!", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid: partial(func, track=track)});

		act_uuid = uuid.uuid4().hex;
		menu.add(telebot.types.InlineKeyboardButton(text="No, never mind", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid: lambda call: self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=parent_menu)});

		self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=menu);

	def get_track_menu(self, track):
		menu = telebot.types.InlineKeyboardMarkup();

		act_uuid = uuid.uuid4().hex;
		prefix = "Add" if any(track.artists) else "Set";
		menu.add(telebot.types.InlineKeyboardButton(text=f"{prefix} artists", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.edit_action, hint="Ok, now send me them (by comma)", property="artists", track=track)});

		act_uuid = uuid.uuid4().hex;
		prefix = "Set" if track.album is None or track.album == "" else "Edit";
		menu.add(telebot.types.InlineKeyboardButton(text=f"{prefix} album", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.edit_action, hint="Sure, what`s the album name?", property="album", track=track)});

		act_uuid = uuid.uuid4().hex;
		prefix = "Add" if any(track.genres) else "Set";
		menu.add(telebot.types.InlineKeyboardButton(text=f"{prefix} genres", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.edit_action, hint="Fine, then write them up (by comma)", property="genres", track=track)});

		act_uuid = uuid.uuid4().hex;
		prefix = "Set" if track.description is None or track.description == "" else "Edit";
		menu.add(telebot.types.InlineKeyboardButton(text=f"{prefix} description", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.edit_action, hint="Sure, now you can enter the description", property="genres", track=track)});

		act_uuid = uuid.uuid4().hex;
		menu.add(telebot.types.InlineKeyboardButton(text="Add link", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.edit_action, hint="Not a problem, please send me one", property="genres", track=track)});

		act_uuid = uuid.uuid4().hex;
		menu.add(telebot.types.InlineKeyboardButton(text="Remove from collection", callback_data=act_uuid));
		self.action_dictionary.update({act_uuid:
			partial(self.del_action, track=track, parent_menu=menu)});
		return menu;


class AdminResponder(Responder):
	def __init__(self, bot):
		self.bot = bot
		super().__init__()

	def respond(self, message):
		success, respond = Responder.check_for_greeting(message.text)
		if success:
			self.bot.send_message(message.chat.id, respond);

	def subscribe_actions(self, call):
		pass;

	@staticmethod
	def check_for_greeting(sentence):
		for word in sentence.split(' '):
			if word.lower() in GREETING_KEYWORDS:
				return True, random.choice(GREETING_RESPONSES)
		return False, '';


class UserResponder(Responder):
	NEW_TRACK_STARTERS = ["Let me think about it ... ü§î", "Hmm, what do I have here...", "I bring to your attention", "I really like thisü§©", "Let's start with this one", "Uff, get ready!", "Your friend has a great taste üëù "," For such a nothing nothing is sorry! üíñ "];
	NEW_TRACK_IMPRESSIONS = ["How do you like one?", "Tell me your impressions", "I will wait for your impressions", "What do you think?", "Do not forget to comment", "I see that you liked it!"];

	music_library = MusicTrack();
	chats_info = ChatsInfo();

	def __init__(self, bot):
		self.bot = bot
		super().__init__(bot)

	def respond(self, message):
		sentence = message.text;
		# success, respond = self.check_for_greeting(sentence);
		if any(word in message.text.lower() for word in ["music", "track", "techno", "new one", "listen", "üé∂", "üéµ"]):
			track = self.music_library.get_new_track();
			self.send_music_track(message, track);
		elif any(word in message.text.lower() for word in ["thx", "thanks"]):
			self.bot.send_message(message.chat.id, "You're welcome");

	def subscribe_actions(self, call):
		params = call.data.split('_');
		if params[0] == "imp":
			self.bot.send_message(call.message.chat.id, random.choice(["Recordingüéô", "I‚Äôm listening to youüéß", "Go for it", "Listening you carefullyüéß"]));
			self.bot.register_next_step_handler(call.message, self.impression_input, params[1]);
		elif params[0] == "artist":
			self.bot.send_message(call.message.chat.id, random.choice(["–ù–≥–∞, –ø–æ–∏—â–µ–º..", "–î–∞–π –∫–∞ –ø–æ–¥—É–º–∞—Ç—å", "–ú–∏–ª–∏—ù–µ–∫—É–Ω–¥–æ—á–∫—É"]));
			track = self.music_library.get_by_artist(params[1]);
			if track is None:
				self.bot.send_message(call.message.chat.id, "–£–≤—ã, –±–æ–ª—å—à–µ —Ç—Ä—ù–∫–æ–≤ –æ—Ç {0} –Ω–µ—Ç...–ù–æ —ù –ø–µ—Ä–µ–¥–∞–º –¢–∏–º–æ—Ñ–µ—é –∏ –∫–æ–≥–¥–∞ –æ–Ω –¥–æ–±–∞–≤–∏—Ç —Ç—ã –æ–± —ù—Ç–æ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–Ω–æ —É–∑–Ω–∞–µ—à—åüòâ".format(params[1]));
				self.bot.send_message(call.message.chat.id, "–ù –ø–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ");
				self.send_music_track(call.message, self.music_library.get_new_track());
				self.bot.send_message(self.chats_info.get_chat_id("timothy_y"), "Alertüö®üö®üö®\n–î–æ—Ä–æ–≥–∞—ù –ù–∞—ù—Ç—ù —Ö–æ—á–µ—Ç –µ—â–µ –º—É–∑—ã–∫–∏ –æ—Ç {0}. –¢–µ–±–µ —ù—Ç–æ–∏—Ç –∑–∞–Ω—ù—Ç—å—ù—ù —ù—Ç–∏–º!".format(params[1]));
			self.send_music_track(call.message, track);

	def send_music_track(self, message, track):
		if track is None:
			self.bot.send_message(message.chat.id, "üò¢üò¢üò¢");
			self.bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏ {0}, –Ω–æ –Ω–æ–≤—ã–π –º—É–∑—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –¢–∏–º–æ—Ñ–µ—é –∏ –∫–æ–≥–¥–∞ –æ–Ω –¥–æ–±–∞–≤—Ç —Ç—ã –æ–± —ù—Ç–æ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–Ω–æ —É–∑–Ω–∞–µ—à—åüòâ".format(random.choice(self.NICKNAMES)));
			self.bot.send_message(self.chats_info.get_chat_id("timothy_y"), "Alertüö®üö®üö®\n–ó–∞–∫–æ–Ω—á–∏–ª–∞—ù—å –º—É–∑—ã–∫–∞ –¥–ª—ù –ª—é–±–∏–º–æ–π –ù–∞—ù—Ç–∏. –¢–µ–±–µ —ù—Ç–æ–∏—Ç –∑–∞–Ω—ù—Ç—å—ù—ù —ù—Ç–∏–º!");
		else:
			self.chats_info.set_last_track(LOVER_USER_ID, track["track_id"]);
			self.bot.send_message(message.chat.id, random.choice(self.NEW_TRACK_STARTERS));
			track_menu = telebot.types.InlineKeyboardMarkup();
			track_menu.add(telebot.types.InlineKeyboardButton(text="Apple Musicüéµ", url=track["track_url"]));
			self.bot.send_message(message.chat.id, "#MusicFromTimothy\n" + track["track_id"].replace("-", " ").title() + random.choice([" –æ—Ç ", " - ", " –≤ –∏—ù–ø–æ–ª–Ω–µ–Ω–∏–∏ "]) + "#" + track["artist"], reply_markup=track_menu);
			# self.bot.send_message(message.chat.id, "–°—ù—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—ù–ª—É—à–∏–≤–∞–Ω–∏–µ:\n{0}".format(track["track_url"]));
			if track["description"] != "-":
				self.bot.send_message(message.chat.id, track["description"]);
			impressions = telebot.types.InlineKeyboardMarkup();
			impressions.add(telebot.types.InlineKeyboardButton(text="–†–∞—ù—ù–∫–∞–∑–∞—Ç—å –≤–ø–µ—á–µ—Ç–ª–µ–Ω–∏—ù", callback_data="imp_" + track["track_id"]));
			impressions.add(telebot.types.InlineKeyboardButton(text="–ï—â–µ –æ—Ç {0}".format(track["artist"]), callback_data="artist_" + track["artist"]));
			self.bot.send_message(message.chat.id, random.choice(self.NEW_TRACK_IMPRESSIONS), reply_markup=impressions)

	def check_for_greeting(self, sentence):
		for word in sentence.words:
			if word.lower() in GREETING_KEYWORDS:
				return True, "–ü—Ä–∏–≤–µ—Ç—ù—Ç–≤—É—é —Ç–µ–±—ù, –ù–∞—ù—Ç—ù. –î–∞ - —ù –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã. –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–ª –º–µ–Ω—ù –æ–ø—Ä–µ–¥–µ–ª—ù—Ç—å —Ç–µ–±—ù –∏–∑ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª—é–¥–µ–π."
		return False, '';

	def impression_input(self, message, track_id):
		self.music_library.rate_track(track_id, message.text);
		self.send_feedback(message.text, track_id)
		self.bot.send_message(message.chat.id, random.choice(["–°–ø–∞—ù–∏–±–æüòò", "–õ–µ—ù—Ç–Ω–æ", "–ü–µ—Ä–µ–¥–∞–º", "–ö—Ä–∞—ù–∏–≤–æ —ù–∫–∞–∑–∞–Ω–æ!üòù", "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—ù—åüòâ"]));

	def send_feedback(self, comment, track_id):
		creator_chat_id = self.chats_info.get_chat_id("timothy_y");
		self.bot.send_message(creator_chat_id, "#NastiaImpressions\n–ù–∞—à–∞ –ª—é–±–∏–º–∞—ù –ù–∞—ù—Ç—ù –ø—Ä–æ—ù–ª—É—à–∞–ª–∞ –∏ –æ—Ü–µ–Ω–∏–ª–∞ —Ç—Ä—ù–∫ {0}".format(track_id.replace("-", " ").title()));
		self.bot.send_message(creator_chat_id, "–¶–∏—Ç–∏—Ä—É—é:\n{0}".format(comment));

	def get_lover_menu(self):
		menu = telebot.types.ReplyKeyboardMarkup();
		menu.row("–ü–æ–ø—Ä–æ—ù–∏—Ç—å –º—É–∑—ã–∫—Éüéµ");
		return menu;
