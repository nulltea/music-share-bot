import random;
import json;
import telebot
import pymongo;
import time;
from DataStorage import MusicTrack;
from DataStorage import ChatsInfo;

CREATOR_USER_ID = "timothy_y";
LOVER_USER_ID = "il_nitski";
FRIEND_USER_ID = "liza"

GREETING_KEYWORDS = ["hello", "hi", "greetings", "sup", "whats up","hey"]
GREETING_RESPONSES = ["Hi there", "Greetings", "Salute", "Hello" "Loadig...Here I am!"]

class Responder:
	def __init__(self, bot):
		self.bot = bot
		super().__init__()

	def respond(self, message):
		success, respond = Responder.check_for_greeting(message.text)
		if success:
			self.bot.send_message(message.chat.id, respond);

	def subscribe_actions(self, call):
		pass;

	@staticmethod
	def check_for_greeting(sentence):
		for word in sentence.split(' '):
			if word.lower() in GREETING_KEYWORDS:
				return True, random.choice(GREETING_RESPONSES)
		return False, '';

class AdminResponder(Responder):
	insert_reply = "Add music track";
	remove_reply = "Remove music track";
	edit_reply = "Edit music track info";
	view_reply = "View music collection";

	music_library = MusicLibrary();

	def __init__(self, bot):
		self.bot = bot
		super().__init__(bot)

	def respond(self, message):
		super().respond(message);
		if any(word in message.text.lower() for word in ["init", "ready"]):
			self.bot.send_message(message.chat.id, "Greetings Master. I am ready to serve you!", reply_markup=self.get_creator_menu());
		if message.text == self.insert_reply:
			self.bot.send_message(message.chat.id, "Send me a link to the track, if you please");
			self.bot.register_next_step_handler(message, self.insert_callback);
		elif message.text == self.edit_reply:
			self.bot.send_message(message.chat.id, "Sure. Specify track id for me");
			self.bot.register_next_step_handler(message, self.edit_callback);
		elif message.text == self.remove_reply:
			self.bot.send_message(message.chat.id, "As you wish, but I will need track id");
			self.bot.register_next_step_handler(message, self.remove_callback);
		elif message.text == self.view_reply:
			self.view_music_collection(message);
	
	def subscribe_actions(self, call):
		params = call.data.split('_');
		if params[0] == "edit":
			track = self.music_library.get_by_id(params[1])
			self.edit_track(call.message, track["track_url"]);
		if params[0] == "plus":
			self.bot.send_message(call.message.chat.id, "to do");
		if params[0] == "minus":
			self.bot.send_message(call.message.chat.id, "to do");

	def command_handler(self, command, message):
		if command == "start":
			self.bot.send_message(message.chat.id, "Greetings stanger. I'm here to help you share music with your friends. Let's begin then, shall we?");

	def view_music_collection(self, message):
		for row in self.music_library.view_tracks({ "is_used": False}):
			menu = telebot.types.InlineKeyboardMarkup();
			menu.add(telebot.types.InlineKeyboardButton(text="Edit", callback_data="edit_"+ row["track_id"]));
			self.bot.send_message(message.chat.id, "Track: {0}\nFrom artist: {1}\nLink to listen: {2}\nDescription: {3}".format(row["track_id"], row["artist"], row["track_url"], row["description"]), reply_markup=menu);

	def insert_callback(self, message):
		music_track = MusicTrack();
		music_track.add_link(message.text); 
		self.bot.send_message(message.chat.id, "Great! Tell me, who is the artist?");
		self.bot.register_next_step_handler(message, self.artist_input_handler, music_track);

	def artist_input_handler(self, message, music_track):
		music_track.artist = message.text;
		self.bot.send_message(message.chat.id, "And finally, come up with a description (genre, artist and background)");
		self.bot.register_next_step_handler(message, self.description_input_handler, music_track);

	def description_input_handler(self, message, music_track):
		music_track.description = message.text;
		music_track.save();
		self.bot.send_message(message.chat.id, "Done! Track added to collection");

	def remove_callback(self,message):
		self.music_library.delete_track(message.text);
		self.bot.send_message(message.chat.id, "Track removed from collection");

	def edit_callback(self, message):
		edit_track(message, message.text);

	def edit_track(self, message, track_url):
		self.bot.send_message(message.chat.id, "Ok, now enter a new description");
		self.bot.register_next_step_handler(message, self.save_edited_data, track_url);

	def save_edited_data(self, message, track_id):
		self.music_library.edit_track({"track_url": track_id}, {'description': message.text});

	def get_creator_menu(self):
		menu = telebot.types.ReplyKeyboardMarkup();
		menu.row(self.insert_reply);
		menu.row(self.edit_reply);
		menu.row(self.remove_reply);
		menu.row(self.view_reply);
		return menu;

class UserResponder(Responder):
	NEW_TRACK_STARTERS = ["–î–∞–π –∫–∞ –ø–æ–¥—É–º–∞—é...ü§î", "–ê–≥–∞, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å", "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–≤–æ–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é", "–≠—Ç–æ—Ç –º–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—å—Å—èü§©", "–ù–∞—á–Ω–µ–º —Å —ç—Ç–æ–≥–æ", "–£—Ñ—Ñ, –≥–æ—Ç–æ–≤—Å—è!", "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞—Ä–∞–ª—Å—è, –∫–æ–Ω–µ—á–Ω–æüëç", "–î–ª—è —Ç–∞–∫–æ–π –¥–µ–≤—É—à–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∂–∞–ª–∫–æ!üíñ"];
	NEW_TRACK_IMPRESSIONS = ["–ö–∞–∫ —Ç–µ–±–µ?", "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–µ—Ç–ª–µ–Ω–∏—è—Ö", "–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–≤–æ–∏—Ö –≤–ø–µ—á–µ—Ç–ª–µ–Ω–∏–π", "–ß—Ç–æ –¥—É–º–∞–µ—à—å?", "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", "–í–∏–∂—É –≤–µ–¥—å, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!"];

	music_library = MusicLibrary();
	chats_info = ChatsInfo();

	def __init__(self, bot):
		self.bot = bot
		super().__init__(bot)

	def respond(self, message):
		sentence = message.text;
		#success, respond = self.check_for_greeting(sentence);
		if any(word in message.text.lower() for word in ["music", "track", "techno", "new one", "listen", "üé∂", "üéµ" ]):
			last_track = self.chats_info.get_last_track(LOVER_USER_ID);
			track = self.music_library.get_new_track(last_track);
			self.send_music_track(message, track);
		elif any(word in message.text.lower() for word in ["thx", "thanks"]):
			self.bot.send_message(message.chat.id, "You're welcome");
	def subscribe_actions(self, call):
		params = call.data.split('_');
		if params[0] == "imp":
			self.bot.send_message(call.message.chat.id, random.choice(["Recordingüéô", "I‚Äôm listening to youüéß", "Go for it", "Listening you carefullyüéß"]));
			self.bot.register_next_step_handler(call.message, self.impression_input, params[1]);
		elif params[0] == "artist":
			self.bot.send_message(call.message.chat.id, random.choice(["–ê–≥–∞, –ø–æ–∏—â–µ–º..", "–î–∞–π –∫–∞ –ø–æ–¥—É–º–∞—Ç—å", "–ú–∏–ª–∏—Å–µ–∫—É–Ω–¥–æ—á–∫—É"]));
			track = self.music_library.get_by_artist(params[1]);
			if track == None:
				self.bot.send_message(call.message.chat.id, "–£–≤—ã, –±–æ–ª—å—à–µ —Ç—Ä—ç–∫–æ–≤ –æ—Ç {0} –Ω–µ—Ç...–ù–æ —è –ø–µ—Ä–µ–¥–∞–º –¢–∏–º–æ—Ñ–µ—é –∏ –∫–æ–≥–¥–∞ –æ–Ω –¥–æ–±–∞–≤–∏—Ç —Ç—ã –æ–± —ç—Ç–æ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–Ω–æ —É–∑–Ω–∞–µ—à—åüòâ".format(params[1]));
				self.bot.send_message(call.message.chat.id, "–ê –ø–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ");
				self.send_music_track(call.message, self.music_library.get_new_track());
				self.bot.send_message(self.chats_info.get_chat_id("timothy_y"), "Alertüö®üö®üö®\n–î–æ—Ä–æ–≥–∞—è –ù–∞—Å—Ç—è —Ö–æ—á–µ—Ç –µ—â–µ –º—É–∑—ã–∫–∏ –æ—Ç {0}. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º!".format(params[1]));
			self.send_music_track(call.message, track);

	def send_music_track(self, message, track):
		if track == None:
			self.bot.send_message(message.chat.id, "üò¢üò¢üò¢");
			self.bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏ {0}, –Ω–æ –Ω–æ–≤—ã–π –º—É–∑—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –¢–∏–º–æ—Ñ–µ—é –∏ –∫–æ–≥–¥–∞ –æ–Ω –¥–æ–±–∞–≤—Ç —Ç—ã –æ–± —ç—Ç–æ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–Ω–æ —É–∑–Ω–∞–µ—à—åüòâ".format(random.choice(self.NICKNAMES)));
			self.bot.send_message(self.chats_info.get_chat_id("timothy_y"), "Alertüö®üö®üö®\n–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –º—É–∑—ã–∫–∞ –¥–ª—è –ª—é–±–∏–º–æ–π –ù–∞—Å—Ç–∏. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º!");
		else:
			self.chats_info.set_last_track(LOVER_USER_ID, track["track_id"]);
			self.bot.send_message(message.chat.id, random.choice(self.NEW_TRACK_STARTERS));
			track_menu = telebot.types.InlineKeyboardMarkup();
			track_menu.add(telebot.types.InlineKeyboardButton(text="Apple Musicüéµ", url=track["track_url"]));
			self.bot.send_message(message.chat.id, "#MusicFromTimothy\n" + track["track_id"].replace("-", " ").title() + random.choice([" –æ—Ç ", " - ", " –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ "]) + "#" + track["artist"],reply_markup=track_menu);
			#self.bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ:\n{0}".format(track["track_url"]));
			if track["description"] != "-": self.bot.send_message(message.chat.id, track["description"]);
			impressions = telebot.types.InlineKeyboardMarkup();
			impressions.add(telebot.types.InlineKeyboardButton(text="–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–ø–µ—á–µ—Ç–ª–µ–Ω–∏—è", callback_data="imp_"+ track["track_id"]));
			impressions.add(telebot.types.InlineKeyboardButton(text="–ï—â–µ –æ—Ç {0}".format(track["artist"]), callback_data="artist_" + track["artist"]));
			self.bot.send_message(message.chat.id, random.choice(self.NEW_TRACK_IMPRESSIONS), reply_markup=impressions)

	def check_for_greeting(self, sentence):
		for word in sentence.words:
			if word.lower() in GREETING_KEYWORDS:
				return True, "–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é —Ç–µ–±—è, –ù–∞—Å—Ç—è. –î–∞ - —è –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã. –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–±—è –∏–∑ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª—é–¥–µ–π."
		return False, '';
	
	def impression_input(self, message, track_id):
		self.music_library.rate_track(track_id, message.text);
		self.send_feedback(message.text, track_id)
		self.bot.send_message(message.chat.id, random.choice(["–°–ø–∞—Å–∏–±–æüòò", "–õ–µ—Å—Ç–Ω–æ", "–ü–µ—Ä–µ–¥–∞–º", "–ö—Ä–∞—Å–∏–≤–æ —Å–∫–∞–∑–∞–Ω–æ!üòç", "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åüòâ"]));

	def send_feedback(self, comment, track_id):
		creator_chat_id = self.chats_info.get_chat_id("timothy_y");
		self.bot.send_message(creator_chat_id, "#NastiaImpressions\n–ù–∞—à–∞ –ª—é–±–∏–º–∞—è –ù–∞—Å—Ç—è –ø—Ä–æ—Å–ª—É—à–∞–ª–∞ –∏ –æ—Ü–µ–Ω–∏–ª–∞ —Ç—Ä—ç–∫ {0}".format(track_id.replace("-", " ").title()));
		self.bot.send_message(creator_chat_id, "–¶–∏—Ç–∏—Ä—É—é:\n{0}".format(comment));

	def get_lover_menu(self):
		menu = telebot.types.ReplyKeyboardMarkup();
		menu.row("–ü–æ–ø—Ä–æ—Å–∏—Ç—å –º—É–∑—ã–∫—Éüéµ");
		return menu;
